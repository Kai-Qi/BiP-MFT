import torch
import math
import copy
from torch import nn
from einops import rearrange
from functools import partial

import sys  
sys.path.append('/data02/qikai/CKD-TransBTS-Total/Ours-SegFormer3D/') 

from architectures.segformer3d_mitb1_group_norm_droppath_no_BN_NewProjection4 import *


class BiP_MFT_3D(nn.Module):
    def __init__(
        self,
        in_channels: int = 4,
        sr_ratios: list = [4, 2, 1, 1],
        embed_dims: list = [32, 64, 160, 256],
        patch_kernel_size: list = [7, 3, 3, 3],
        patch_stride: list = [4, 2, 2, 2],
        patch_padding: list = [3, 1, 1, 1],
        mlp_ratios: list = [4, 4, 4, 4],
        num_heads: list = [1, 2, 5, 8],
        depths: list = [2, 2, 2, 2],
        decoder_head_embedding_dim: int = 256,
        num_classes: int = 3,
        decoder_dropout: float = 0.0,
        drop_path_rate: float = 0.0,
    ):
        """
        in_channels: number of the input channels
        img_volume_dim: spatial resolution of the image volume (Depth, Width, Height)
        sr_ratios: the rates at which to down sample the sequence length of the embedded patch
        embed_dims: hidden size of the PatchEmbedded input
        patch_kernel_size: kernel size for the convolution in the patch embedding module
        patch_stride: stride for the convolution in the patch embedding module
        patch_padding: padding for the convolution in the patch embedding module
        mlp_ratios: at which rate increases the projection dim of the hidden_state in the mlp
        num_heads: number of attention heads
        depths: number of attention layers
        decoder_head_embedding_dim: projection dimension of the mlp layer in the all-mlp-decoder module
        num_classes: number of the output channel of the network
        decoder_dropout: dropout rate of the concatenated feature maps

        """
        super().__init__()


        self.backbone_T1 =  MixVisionTransformer(
            in_channels=2,
            sr_ratios=sr_ratios,
            embed_dims=embed_dims,
            patch_kernel_size=patch_kernel_size,
            patch_stride=patch_stride,
            patch_padding=patch_padding,
            mlp_ratios=mlp_ratios,
            num_heads=num_heads,
            depths=depths,
            drop_path_rate = drop_path_rate,
        )
        
        self.backbone_T2 =  MixVisionTransformer(
            in_channels=2,
            sr_ratios=sr_ratios,
            embed_dims=embed_dims,
            patch_kernel_size=patch_kernel_size,
            patch_stride=patch_stride,
            patch_padding=patch_padding,
            mlp_ratios=mlp_ratios,
            num_heads=num_heads,
            depths=depths,
            drop_path_rate = drop_path_rate,
        )

        input_feature_dims = embed_dims[::-1]
        
        ############################################
        self.linear_c4_T1 = MLP_(
            input_dim=input_feature_dims[0],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c3_T1 = MLP_(
            input_dim=input_feature_dims[1],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c2_T1 = MLP_(
            input_dim=input_feature_dims[2],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c1_T1 = MLP_(
            input_dim=input_feature_dims[3],
            embed_dim=decoder_head_embedding_dim,
        )
        # convolution module to combine feature maps generated by the mlps
        self.linear_fuse_T1 = nn.Sequential(
            nn.Conv3d(
                in_channels=4 * decoder_head_embedding_dim,
                out_channels=decoder_head_embedding_dim,
                kernel_size=1,
                stride=1,
                bias=False,
            ),
            nn.GroupNorm(num_groups=8, num_channels=decoder_head_embedding_dim)  ,
            nn.ReLU(),
        )


        ###########################################
        self.linear_c4_T2 = MLP_(
            input_dim=input_feature_dims[0],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c3_T2 = MLP_(
            input_dim=input_feature_dims[1],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c2_T2 = MLP_(
            input_dim=input_feature_dims[2],
            embed_dim=decoder_head_embedding_dim,
        )
        self.linear_c1_T2 = MLP_(
            input_dim=input_feature_dims[3],
            embed_dim=decoder_head_embedding_dim,
        )
        # convolution module to combine feature maps generated by the mlps
        self.linear_fuse_T2 = nn.Sequential(
            nn.Conv3d(
                in_channels=4 * decoder_head_embedding_dim,
                out_channels=decoder_head_embedding_dim,
                kernel_size=1,
                stride=1,
                bias=False,
            ),
            nn.GroupNorm(num_groups=8, num_channels=decoder_head_embedding_dim)  ,
            nn.ReLU(),
        )
        self.dropout_T2 = nn.Dropout(decoder_dropout)

        # final linear projection layer
        self.linear_pred_T2 = nn.Conv3d(
            decoder_head_embedding_dim, num_classes, kernel_size=1
        )

        # segformer decoder generates the final decoded feature map size at 1/4 of the original input volume size
        self.upsample_volume = nn.Upsample(
            scale_factor=4.0, mode="trilinear", align_corners=False
        )   
        
        
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            nn.init.trunc_normal_(m.weight, std=0.02)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.BatchNorm2d):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.BatchNorm3d):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.GroupNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)
        elif isinstance(m, nn.Conv2d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()
        elif isinstance(m, nn.Conv3d):
            fan_out = m.kernel_size[0] * m.kernel_size[1] * m.kernel_size[2] * m.out_channels
            fan_out //= m.groups
            m.weight.data.normal_(0, math.sqrt(2.0 / fan_out))
            if m.bias is not None:
                m.bias.data.zero_()



    def forward(self, x ):
        """Encode images with backbone and decode into a semantic segmentation
        map of the same size as input."""
                
        img_T1 = x[:,0:2,]
        img_T2 = x[:,2:4,]
        out_T1 = []
        out_T2 = []
        
        ####
        x_T1 = self.backbone_T1.embed_1(img_T1)
        x_T2 = self.backbone_T2.embed_1(img_T2)
        B, N, C = x_T1.shape
        n = cube_root(N)
        for i, blk in enumerate(self.backbone_T1.tf_block1):
            if i == 0:
                x_T1 = self.backbone_T1.tf_block1[i](x_T1,  opposite = None)
                x_T2 = self.backbone_T2.tf_block1[i](x_T2,  opposite = x_T1)
            else:
                x_T1 = self.backbone_T1.tf_block1[i](x_T1,  opposite = x_T2)
                x_T2 = self.backbone_T2.tf_block1[i](x_T2,  opposite = x_T1) 
                
        x_T1 = x_T1.permute(0,2,1)
        x_T1 = self.backbone_T1.norm1(x_T1)
        x_T1 = x_T1.permute(0,2,1)
        x_T2 = x_T2.permute(0,2,1)
        x_T2 = self.backbone_T2.norm1(x_T2)
        x_T2 = x_T2.permute(0,2,1)


        x_T1 = x_T1.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        x_T2 = x_T2.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        out_T1.append(x_T1)
        out_T2.append(x_T2)

        
        ####
        x_T1 = self.backbone_T1.embed_2(x_T1)
        x_T2 = self.backbone_T2.embed_2(x_T2)
        B, N, C = x_T1.shape
        n = cube_root(N)
        for i, blk in enumerate(self.backbone_T1.tf_block2):
            if i == 0:
                x_T1 = self.backbone_T1.tf_block2[i](x_T1,  opposite = None)
                x_T2 = self.backbone_T2.tf_block2[i](x_T2,  opposite = x_T1)
            else:
                x_T1 = self.backbone_T1.tf_block2[i](x_T1,  opposite = x_T2)
                x_T2 = self.backbone_T2.tf_block2[i](x_T2,  opposite = x_T1) 
                
        x_T1 = x_T1.permute(0,2,1)
        x_T1 = self.backbone_T1.norm2(x_T1)
        x_T1 = x_T1.permute(0,2,1)
        x_T2 = x_T2.permute(0,2,1)
        x_T2 = self.backbone_T2.norm2(x_T2)
        x_T2 = x_T2.permute(0,2,1)

 
        x_T1 = x_T1.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        x_T2 = x_T2.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        out_T1.append(x_T1)
        out_T2.append(x_T2)
    
        ####
        x_T1 = self.backbone_T1.embed_3(x_T1)
        x_T2 = self.backbone_T2.embed_3(x_T2)
        B, N, C = x_T1.shape
        n = cube_root(N)
        for i, blk in enumerate(self.backbone_T1.tf_block3):
            if i == 0:
                x_T1 = self.backbone_T1.tf_block3[i](x_T1,  opposite = None)
                x_T2 = self.backbone_T2.tf_block3[i](x_T2,  opposite = x_T1)
            else:
                x_T1 = self.backbone_T1.tf_block3[i](x_T1,  opposite = x_T2)
                x_T2 = self.backbone_T2.tf_block3[i](x_T2,  opposite = x_T1) 
                
        x_T1 = x_T1.permute(0,2,1)
        x_T1 = self.backbone_T1.norm3(x_T1)
        x_T1 = x_T1.permute(0,2,1)
        x_T2 = x_T2.permute(0,2,1)
        x_T2 = self.backbone_T2.norm3(x_T2)
        x_T2 = x_T2.permute(0,2,1)

    
        x_T1 = x_T1.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        x_T2 = x_T2.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        out_T1.append(x_T1)
        out_T2.append(x_T2)
  
        
        ####
        x_T1 = self.backbone_T1.embed_4(x_T1)
        x_T2 = self.backbone_T2.embed_4(x_T2)
        B, N, C = x_T1.shape
        n = cube_root(N)
        for i, blk in enumerate(self.backbone_T1.tf_block4):
            if i == 0:
                x_T1 = self.backbone_T1.tf_block4[i](x_T1,  opposite = None)
                x_T2 = self.backbone_T2.tf_block4[i](x_T2,  opposite = x_T1)
            else:
                x_T1 = self.backbone_T1.tf_block4[i](x_T1,  opposite = x_T2)
                x_T2 = self.backbone_T2.tf_block4[i](x_T2,  opposite = x_T1) 
                
        x_T1 = x_T1.permute(0,2,1)
        x_T1 = self.backbone_T1.norm4(x_T1)
        x_T1 = x_T1.permute(0,2,1)
        x_T2 = x_T2.permute(0,2,1)
        x_T2 = self.backbone_T2.norm4(x_T2)
        x_T2 = x_T2.permute(0,2,1)

     
        x_T1 = x_T1.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        x_T2 = x_T2.reshape(B, n, n, n, -1).permute(0, 4, 1, 2, 3).contiguous()
        out_T1.append(x_T1)
        out_T2.append(x_T2)


############################################

        c1 = out_T1[0]
        c2 = out_T1[1]
        c3 = out_T1[2]
        c4 = out_T1[3]

        n, _, _, _, _ = c4.shape

        _c4 = (
            self.linear_c4_T1(c4)
            .permute(0, 2, 1)
            .reshape(n, -1, c4.shape[2], c4.shape[3], c4.shape[4])
            .contiguous()
        )
        _c4 = torch.nn.functional.interpolate(
            _c4,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )

        _c3 = (
            self.linear_c3_T1(c3)
            .permute(0, 2, 1)
            .reshape(n, -1, c3.shape[2], c3.shape[3], c3.shape[4])
            .contiguous()
        )
        _c3 = torch.nn.functional.interpolate(
            _c3,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )

        _c2 = (
            self.linear_c2_T1(c2)
            .permute(0, 2, 1)
            .reshape(n, -1, c2.shape[2], c2.shape[3], c2.shape[4])
            .contiguous()
        )
        _c2 = torch.nn.functional.interpolate(
            _c2,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )

        _c1 = (
            self.linear_c1_T1(c1)
            .permute(0, 2, 1)
            .reshape(n, -1, c1.shape[2], c1.shape[3], c1.shape[4])
            .contiguous()
        )

        x1 = self.linear_fuse_T1(torch.cat([_c4, _c3, _c2, _c1], dim=1))


        #################################################################################

        c1 = out_T2[0]
        c2 = out_T2[1]
        c3 = out_T2[2]
        c4 = out_T2[3]
        
        n, _, _, _, _ = c4.shape

        _c4 = (
            self.linear_c4_T2(c4)
            .permute(0, 2, 1)
            .reshape(n, -1, c4.shape[2], c4.shape[3], c4.shape[4])
            .contiguous()
        )
        _c4 = torch.nn.functional.interpolate(
            _c4,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )
        _c3 = (
            self.linear_c3_T2(c3)
            .permute(0, 2, 1)
            .reshape(n, -1, c3.shape[2], c3.shape[3], c3.shape[4])
            .contiguous()
        )
        _c3 = torch.nn.functional.interpolate(
            _c3,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )
        _c2 = (
            self.linear_c2_T2(c2)
            .permute(0, 2, 1)
            .reshape(n, -1, c2.shape[2], c2.shape[3], c2.shape[4])
            .contiguous()
        )
        _c2 = torch.nn.functional.interpolate(
            _c2,
            size=c1.size()[2:],
            mode="trilinear",
            align_corners=False,
        )
        _c1 = (
            self.linear_c1_T2(c1)
            .permute(0, 2, 1)
            .reshape(n, -1, c1.shape[2], c1.shape[3], c1.shape[4])
            .contiguous()
        )

        x2 = self.linear_fuse_T2(torch.cat([_c4, _c3, _c2, _c1], dim=1))
        x = (x1+x2) / 2.0
        x = self.dropout_T2(x)

        seg = self.linear_pred_T2(x)
        seg = self.upsample_volume(seg)

 
        return seg




if __name__ == "__main__":
    
    x = torch.randint(
        low=0,
        high=255,
        size=(1, 4, 128, 128, 128),
        dtype=torch.float,
    )
    x = x.to("cuda:0")
    
    print(x.shape)
    print(x.shape)
    
    segformer3D = Ours_SegFormer3D().to("cuda:0")
    output = segformer3D(x)
    
    print(count_params(segformer3D))
    print(output.shape)
    
    